//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MaxMaster.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MaxMasterDbEntities : DbContext
    {
        public MaxMasterDbEntities()
            : base("name=MaxMasterDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivitiesLog> ActivitiesLogs { get; set; }
        public virtual DbSet<ActivityAttachment> ActivityAttachments { get; set; }
        public virtual DbSet<ActivityNotification> ActivityNotifications { get; set; }
        public virtual DbSet<ApprovedInvoice> ApprovedInvoices { get; set; }
        public virtual DbSet<ApprovedInvoiceService> ApprovedInvoiceServices { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<BillAttachment> BillAttachments { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<ClientEmployee> ClientEmployees { get; set; }
        public virtual DbSet<ClientErrorLog> ClientErrorLogs { get; set; }
        public virtual DbSet<ClientLocation> ClientLocations { get; set; }
        public virtual DbSet<ClientReceivable> ClientReceivables { get; set; }
        public virtual DbSet<ClientReceivableService> ClientReceivableServices { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientVertical> ClientVerticals { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<DefaultAllocation> DefaultAllocations { get; set; }
        public virtual DbSet<DeliveryChallan> DeliveryChallans { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<DoctorGroupEmployee> DoctorGroupEmployees { get; set; }
        public virtual DbSet<DoctorGroup> DoctorGroups { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DoctorVoiceGrade> DoctorVoiceGrades { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<EmployeeAttendanceLog> EmployeeAttendanceLogs { get; set; }
        public virtual DbSet<EmployeePaymentRecord> EmployeePaymentRecords { get; set; }
        public virtual DbSet<EmployeePayscale> EmployeePayscales { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeSpecialty> EmployeeSpecialties { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<GST> GSTs { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceService> InvoiceServices { get; set; }
        public virtual DbSet<ItemPrice> ItemPrices { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemsBillMapping> ItemsBillMappings { get; set; }
        public virtual DbSet<ItemsMaster> ItemsMasters { get; set; }
        public virtual DbSet<LeaveRecord> LeaveRecords { get; set; }
        public virtual DbSet<Leaf> Leaves { get; set; }
        public virtual DbSet<Opportunity> Opportunities { get; set; }
        public virtual DbSet<OpportunitiesLog> OpportunitiesLogs { get; set; }
        public virtual DbSet<OpportunityAttachment> OpportunityAttachments { get; set; }
        public virtual DbSet<OpportunityCategory> OpportunityCategories { get; set; }
        public virtual DbSet<OpportunityCategoryMapping> OpportunityCategoryMappings { get; set; }
        public virtual DbSet<OpportunityContactMapping> OpportunityContactMappings { get; set; }
        public virtual DbSet<OpportunitySubCategory> OpportunitySubCategories { get; set; }
        public virtual DbSet<Organisation> Organisations { get; set; }
        public virtual DbSet<OrgansationLocation> OrgansationLocations { get; set; }
        public virtual DbSet<POAttachment> POAttachments { get; set; }
        public virtual DbSet<PointsLog> PointsLogs { get; set; }
        public virtual DbSet<POItemsMapping> POItemsMappings { get; set; }
        public virtual DbSet<PuchaseOrder> PuchaseOrders { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<SOAttachment> SOAttachments { get; set; }
        public virtual DbSet<SOItemsMapping> SOItemsMappings { get; set; }
        public virtual DbSet<Specialty> Specialties { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<StockManager> StockManagers { get; set; }
        public virtual DbSet<StockOut> StockOuts { get; set; }
        public virtual DbSet<StockRequest> StockRequests { get; set; }
        public virtual DbSet<StockRequestMapping> StockRequestMappings { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TD> TDS { get; set; }
        public virtual DbSet<TDSSection> TDSSections { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<VoiceGradePricing> VoiceGradePricings { get; set; }
    
        public virtual int AddActivityNotifications(string activityId, string employeeId)
        {
            var activityIdParameter = activityId != null ?
                new ObjectParameter("ActivityId", activityId) :
                new ObjectParameter("ActivityId", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddActivityNotifications", activityIdParameter, employeeIdParameter);
        }
    
        public virtual ObjectResult<CategoriesSummary_Result> CategoriesSummary(string empId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategoriesSummary_Result>("CategoriesSummary", empIdParameter);
        }
    
        public virtual ObjectResult<ClientMasterReport_Result> ClientMasterReport(Nullable<int> clientId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientMasterReport_Result>("ClientMasterReport", clientIdParameter, fromdateParameter, todateParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<ClientPayments_Result> ClientPayments(string client_Id)
        {
            var client_IdParameter = client_Id != null ?
                new ObjectParameter("Client_Id", client_Id) :
                new ObjectParameter("Client_Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientPayments_Result>("ClientPayments", client_IdParameter);
        }
    
        public virtual ObjectResult<ClientTasksSummary_Result> ClientTasksSummary(string empId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientTasksSummary_Result>("ClientTasksSummary", empIdParameter);
        }
    
        public virtual ObjectResult<DoctorDetailsGet_Result> DoctorDetailsGet(string idigitalAuthorId, string name, string client, string email, string phoneNumber, string jobLevel, string voiceGrade, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var idigitalAuthorIdParameter = idigitalAuthorId != null ?
                new ObjectParameter("IdigitalAuthorId", idigitalAuthorId) :
                new ObjectParameter("IdigitalAuthorId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var jobLevelParameter = jobLevel != null ?
                new ObjectParameter("JobLevel", jobLevel) :
                new ObjectParameter("JobLevel", typeof(string));
    
            var voiceGradeParameter = voiceGrade != null ?
                new ObjectParameter("VoiceGrade", voiceGrade) :
                new ObjectParameter("VoiceGrade", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DoctorDetailsGet_Result>("DoctorDetailsGet", idigitalAuthorIdParameter, nameParameter, clientParameter, emailParameter, phoneNumberParameter, jobLevelParameter, voiceGradeParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<EmployeeActivitiesLogReport_Result> EmployeeActivitiesLogReport(string empId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string clientId, string status, Nullable<int> priority, string taskId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var taskIdParameter = taskId != null ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeActivitiesLogReport_Result>("EmployeeActivitiesLogReport", empIdParameter, fromDateParameter, toDateParameter, clientIdParameter, statusParameter, priorityParameter, taskIdParameter);
        }
    
        public virtual ObjectResult<EmployeeAttendanceReport_Result> EmployeeAttendanceReport(string empId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeAttendanceReport_Result>("EmployeeAttendanceReport", empIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<EmployeeDayReport_Result> EmployeeDayReport(string empId, string clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string status, Nullable<int> priority, string taskId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var taskIdParameter = taskId != null ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeDayReport_Result>("EmployeeDayReport", empIdParameter, clientIdParameter, fromDateParameter, toDateParameter, statusParameter, priorityParameter, taskIdParameter);
        }
    
        public virtual ObjectResult<EmployeeTasksSummary_Result> EmployeeTasksSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeTasksSummary_Result>("EmployeeTasksSummary");
        }
    
        public virtual ObjectResult<GetBilledItems_Result> GetBilledItems(Nullable<int> billId)
        {
            var billIdParameter = billId.HasValue ?
                new ObjectParameter("BillId", billId) :
                new ObjectParameter("BillId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBilledItems_Result>("GetBilledItems", billIdParameter);
        }
    
        public virtual ObjectResult<GetBills_Result> GetBills(string supplier, string billNumber, Nullable<System.DateTime> billDate, Nullable<System.DateTime> dueDate, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var supplierParameter = supplier != null ?
                new ObjectParameter("Supplier", supplier) :
                new ObjectParameter("Supplier", typeof(string));
    
            var billNumberParameter = billNumber != null ?
                new ObjectParameter("BillNumber", billNumber) :
                new ObjectParameter("BillNumber", typeof(string));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBills_Result>("GetBills", supplierParameter, billNumberParameter, billDateParameter, dueDateParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetCategories_Result> GetCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategories_Result>("GetCategories");
        }
    
        public virtual ObjectResult<GetClientEmployees_Result> GetClientEmployees(Nullable<int> clientId, string firstName, string lastName, string email, string primaryPhone, string department, Nullable<int> orgId, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientEmployees_Result>("GetClientEmployees", clientIdParameter, firstNameParameter, lastNameParameter, emailParameter, primaryPhoneParameter, departmentParameter, orgIdParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetClients_Result> GetClients(string clientName, string phone, string email, string clientType, string fax, Nullable<int> orgId, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var clientTypeParameter = clientType != null ?
                new ObjectParameter("ClientType", clientType) :
                new ObjectParameter("ClientType", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClients_Result>("GetClients", clientNameParameter, phoneParameter, emailParameter, clientTypeParameter, faxParameter, orgIdParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetClientTickets_Result> GetClientTickets(string clientId, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientTickets_Result>("GetClientTickets", clientIdParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetDefaultAllocations_Result> GetDefaultAllocations(Nullable<int> clientId, Nullable<int> doctorId, Nullable<int> employeeId, string jobLevel, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("DoctorId", doctorId) :
                new ObjectParameter("DoctorId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var jobLevelParameter = jobLevel != null ?
                new ObjectParameter("JobLevel", jobLevel) :
                new ObjectParameter("JobLevel", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDefaultAllocations_Result>("GetDefaultAllocations", clientIdParameter, doctorIdParameter, employeeIdParameter, jobLevelParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetDispatchedStockReport_Result> GetDispatchedStockReport(string client, Nullable<int> project, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var projectParameter = project.HasValue ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDispatchedStockReport_Result>("GetDispatchedStockReport", clientParameter, projectParameter, fromDateParameter, toDateParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDocuments_Result> GetEmployeeDocuments(Nullable<int> empId, string category, Nullable<System.DateTime> documentDate, Nullable<System.DateTime> uploadDate, string notes, string keyWords, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var uploadDateParameter = uploadDate.HasValue ?
                new ObjectParameter("UploadDate", uploadDate) :
                new ObjectParameter("UploadDate", typeof(System.DateTime));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var keyWordsParameter = keyWords != null ?
                new ObjectParameter("KeyWords", keyWords) :
                new ObjectParameter("KeyWords", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDocuments_Result>("GetEmployeeDocuments", empIdParameter, categoryParameter, documentDateParameter, uploadDateParameter, notesParameter, keyWordsParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLocations_Result> GetEmployeeLocations(string employeeId, Nullable<System.DateTime> date)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLocations_Result>("GetEmployeeLocations", employeeIdParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetEmployees_Result> GetEmployees(string empNumber, string empName, string email, string primaryPhone, string department, string designation, string manager, Nullable<int> orgId, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empNumberParameter = empNumber != null ?
                new ObjectParameter("EmpNumber", empNumber) :
                new ObjectParameter("EmpNumber", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var managerParameter = manager != null ?
                new ObjectParameter("Manager", manager) :
                new ObjectParameter("Manager", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployees_Result>("GetEmployees", empNumberParameter, empNameParameter, emailParameter, primaryPhoneParameter, departmentParameter, designationParameter, managerParameter, orgIdParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetEmployeesActivitiesReport_Result> GetEmployeesActivitiesReport(string employeeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string clientId, string status, Nullable<int> priority, string taskId, Nullable<int> category)
        {
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var taskIdParameter = taskId != null ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesActivitiesReport_Result>("GetEmployeesActivitiesReport", employeeIdParameter, fromDateParameter, toDateParameter, clientIdParameter, statusParameter, priorityParameter, taskIdParameter, categoryParameter);
        }
    
        public virtual ObjectResult<GetEmployeesLatestLocation_Result> GetEmployeesLatestLocation(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesLatestLocation_Result>("GetEmployeesLatestLocation", dateParameter);
        }
    
        public virtual ObjectResult<GetEmployeesTasksCount_Result> GetEmployeesTasksCount(string empId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string clientId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesTasksCount_Result>("GetEmployeesTasksCount", empIdParameter, fromDateParameter, toDateParameter, clientIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeesToBeLogin_Result> GetEmployeesToBeLogin(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesToBeLogin_Result>("GetEmployeesToBeLogin", dateParameter);
        }
    
        public virtual ObjectResult<GetItemModels_Result> GetItemModels(string itemName, string modelNumber, string brand, Nullable<int> quantity, string quantitySymbol, Nullable<int> threshold, string thresholdSymbol, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var modelNumberParameter = modelNumber != null ?
                new ObjectParameter("ModelNumber", modelNumber) :
                new ObjectParameter("ModelNumber", typeof(string));
    
            var brandParameter = brand != null ?
                new ObjectParameter("Brand", brand) :
                new ObjectParameter("Brand", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var quantitySymbolParameter = quantitySymbol != null ?
                new ObjectParameter("QuantitySymbol", quantitySymbol) :
                new ObjectParameter("QuantitySymbol", typeof(string));
    
            var thresholdParameter = threshold.HasValue ?
                new ObjectParameter("Threshold", threshold) :
                new ObjectParameter("Threshold", typeof(int));
    
            var thresholdSymbolParameter = thresholdSymbol != null ?
                new ObjectParameter("ThresholdSymbol", thresholdSymbol) :
                new ObjectParameter("ThresholdSymbol", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemModels_Result>("GetItemModels", itemNameParameter, modelNumberParameter, brandParameter, quantityParameter, quantitySymbolParameter, thresholdParameter, thresholdSymbolParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetItems_Result> GetItems(Nullable<int> modelId, string serialNum, string batchNum, string macAddress, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var modelIdParameter = modelId.HasValue ?
                new ObjectParameter("ModelId", modelId) :
                new ObjectParameter("ModelId", typeof(int));
    
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            var batchNumParameter = batchNum != null ?
                new ObjectParameter("BatchNum", batchNum) :
                new ObjectParameter("BatchNum", typeof(string));
    
            var macAddressParameter = macAddress != null ?
                new ObjectParameter("MacAddress", macAddress) :
                new ObjectParameter("MacAddress", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItems_Result>("GetItems", modelIdParameter, serialNumParameter, batchNumParameter, macAddressParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetLeadDetail_Result> GetLeadDetail(Nullable<int> opportunity)
        {
            var opportunityParameter = opportunity.HasValue ?
                new ObjectParameter("Opportunity", opportunity) :
                new ObjectParameter("Opportunity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeadDetail_Result>("GetLeadDetail", opportunityParameter);
        }
    
        public virtual ObjectResult<GetLeads_Result> GetLeads(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string opportunity, string clientId, string assignedTo, string status, Nullable<int> orgId, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var opportunityParameter = opportunity != null ?
                new ObjectParameter("Opportunity", opportunity) :
                new ObjectParameter("Opportunity", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeads_Result>("GetLeads", fromDateParameter, toDateParameter, opportunityParameter, clientIdParameter, assignedToParameter, statusParameter, orgIdParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetMyTasks_Result> GetMyTasks(string empId, string clientId, Nullable<int> departmentId, string taskType, string priority, string taskStatus, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyTasks_Result>("GetMyTasks", empIdParameter, clientIdParameter, departmentIdParameter, taskTypeParameter, priorityParameter, taskStatusParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetMyTasksWeb_Result> GetMyTasksWeb(string empId, string clientId, Nullable<int> departmentId, string taskType, string priority, string taskStatus, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMyTasksWeb_Result>("GetMyTasksWeb", empIdParameter, clientIdParameter, departmentIdParameter, taskTypeParameter, priorityParameter, taskStatusParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetOpportunitiesList_Result> GetOpportunitiesList(string opportunity, string clientId, string assignedTo, string status, Nullable<int> orgId, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var opportunityParameter = opportunity != null ?
                new ObjectParameter("Opportunity", opportunity) :
                new ObjectParameter("Opportunity", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var assignedToParameter = assignedTo != null ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpportunitiesList_Result>("GetOpportunitiesList", opportunityParameter, clientIdParameter, assignedToParameter, statusParameter, orgIdParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetOpportunityBasicInfo_Result> GetOpportunityBasicInfo(Nullable<int> oppId)
        {
            var oppIdParameter = oppId.HasValue ?
                new ObjectParameter("OppId", oppId) :
                new ObjectParameter("OppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpportunityBasicInfo_Result>("GetOpportunityBasicInfo", oppIdParameter);
        }
    
        public virtual ObjectResult<GetOpportunityContacts_Result> GetOpportunityContacts(Nullable<int> oppId)
        {
            var oppIdParameter = oppId.HasValue ?
                new ObjectParameter("oppId", oppId) :
                new ObjectParameter("oppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpportunityContacts_Result>("GetOpportunityContacts", oppIdParameter);
        }
    
        public virtual ObjectResult<GetOpportunityLog_Result> GetOpportunityLog(Nullable<int> oppId)
        {
            var oppIdParameter = oppId.HasValue ?
                new ObjectParameter("oppId", oppId) :
                new ObjectParameter("oppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpportunityLog_Result>("GetOpportunityLog", oppIdParameter);
        }
    
        public virtual ObjectResult<GetOrganisations_Result> GetOrganisations(string orgName, string email, string webSite, string primaryPhone, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var orgNameParameter = orgName != null ?
                new ObjectParameter("OrgName", orgName) :
                new ObjectParameter("OrgName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var primaryPhoneParameter = primaryPhone != null ?
                new ObjectParameter("PrimaryPhone", primaryPhone) :
                new ObjectParameter("PrimaryPhone", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOrganisations_Result>("GetOrganisations", orgNameParameter, emailParameter, webSiteParameter, primaryPhoneParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetStockReport_Result> GetStockReport(string clientId, Nullable<int> projectId, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockReport_Result>("GetStockReport", clientIdParameter, projectIdParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetStockRequest_Result> GetStockRequest(Nullable<int> stockReqId)
        {
            var stockReqIdParameter = stockReqId.HasValue ?
                new ObjectParameter("StockReqId", stockReqId) :
                new ObjectParameter("StockReqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockRequest_Result>("GetStockRequest", stockReqIdParameter);
        }
    
        public virtual ObjectResult<GetStockRequests_Result> GetStockRequests(string employee, string client, Nullable<int> project, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, string status, Nullable<int> pageNumber, Nullable<int> recordsPerPage)
        {
            var employeeParameter = employee != null ?
                new ObjectParameter("Employee", employee) :
                new ObjectParameter("Employee", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var projectParameter = project.HasValue ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStockRequests_Result>("GetStockRequests", employeeParameter, clientParameter, projectParameter, fromDateParameter, todateParameter, statusParameter, pageNumberParameter, recordsPerPageParameter);
        }
    
        public virtual ObjectResult<GetTaskBasicInfo_Result> GetTaskBasicInfo(string taskId)
        {
            var taskIdParameter = taskId != null ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskBasicInfo_Result>("GetTaskBasicInfo", taskIdParameter);
        }
    
        public virtual ObjectResult<GetTaskDetail_Result> GetTaskDetail(string taskId, string empId)
        {
            var taskIdParameter = taskId != null ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(string));
    
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskDetail_Result>("GetTaskDetail", taskIdParameter, empIdParameter);
        }
    
        public virtual ObjectResult<GetTaskLog_Result> GetTaskLog(string taskId)
        {
            var taskIdParameter = taskId != null ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTaskLog_Result>("GetTaskLog", taskIdParameter);
        }
    
        public virtual ObjectResult<GetTasksByMe_Result> GetTasksByMe(string empId, string clientId, Nullable<int> departmentId, string taskType, string priority, string taskStatus, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksByMe_Result>("GetTasksByMe", empIdParameter, clientIdParameter, departmentIdParameter, taskTypeParameter, priorityParameter, taskStatusParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetTasksThroughMe_Result> GetTasksThroughMe(string empId, string clientId, Nullable<int> departmentId, string taskType, string priority, string taskStatus, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTasksThroughMe_Result>("GetTasksThroughMe", empIdParameter, clientIdParameter, departmentIdParameter, taskTypeParameter, priorityParameter, taskStatusParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetTicketLog_Result> GetTicketLog(string ticketId)
        {
            var ticketIdParameter = ticketId != null ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTicketLog_Result>("GetTicketLog", ticketIdParameter);
        }
    
        public virtual ObjectResult<GetToDoLeads_Result> GetToDoLeads(string empId, string clientId, Nullable<int> departmentId, string taskType, string taskStatus, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetToDoLeads_Result>("GetToDoLeads", empIdParameter, clientIdParameter, departmentIdParameter, taskTypeParameter, taskStatusParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<GetToDoPendingTasks_Result> GetToDoPendingTasks(string empId, string clientId, Nullable<int> departmentId, string taskType, string priority, string taskStatus, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var taskTypeParameter = taskType != null ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var taskStatusParameter = taskStatus != null ?
                new ObjectParameter("TaskStatus", taskStatus) :
                new ObjectParameter("TaskStatus", typeof(string));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetToDoPendingTasks_Result>("GetToDoPendingTasks", empIdParameter, clientIdParameter, departmentIdParameter, taskTypeParameter, priorityParameter, taskStatusParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual ObjectResult<LeadsSummary_Result> LeadsSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LeadsSummary_Result>("LeadsSummary");
        }
    
        public virtual ObjectResult<LogReport_Result> LogReport(string empId, string clientId, Nullable<System.DateTime> logFromDate, Nullable<System.DateTime> logToDate, string status, Nullable<int> priority, string taskId, Nullable<int> category)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            var clientIdParameter = clientId != null ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(string));
    
            var logFromDateParameter = logFromDate.HasValue ?
                new ObjectParameter("LogFromDate", logFromDate) :
                new ObjectParameter("LogFromDate", typeof(System.DateTime));
    
            var logToDateParameter = logToDate.HasValue ?
                new ObjectParameter("LogToDate", logToDate) :
                new ObjectParameter("LogToDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(int));
    
            var taskIdParameter = taskId != null ?
                new ObjectParameter("TaskId", taskId) :
                new ObjectParameter("TaskId", typeof(string));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogReport_Result>("LogReport", empIdParameter, clientIdParameter, logFromDateParameter, logToDateParameter, statusParameter, priorityParameter, taskIdParameter, categoryParameter);
        }
    
        public virtual ObjectResult<MaxClientDueDetails_Result> MaxClientDueDetails(string client_Id, string invoiceId)
        {
            var client_IdParameter = client_Id != null ?
                new ObjectParameter("Client_Id", client_Id) :
                new ObjectParameter("Client_Id", typeof(string));
    
            var invoiceIdParameter = invoiceId != null ?
                new ObjectParameter("InvoiceId", invoiceId) :
                new ObjectParameter("InvoiceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MaxClientDueDetails_Result>("MaxClientDueDetails", client_IdParameter, invoiceIdParameter);
        }
    
        public virtual ObjectResult<MaxEmpReport_Result> MaxEmpReport(Nullable<int> empId, Nullable<int> clientId, Nullable<int> doctorId, string jobWorkLevel, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> pageNumber, Nullable<int> recordsPerPage, string sortCol, string sortDir)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("DoctorId", doctorId) :
                new ObjectParameter("DoctorId", typeof(int));
    
            var jobWorkLevelParameter = jobWorkLevel != null ?
                new ObjectParameter("JobWorkLevel", jobWorkLevel) :
                new ObjectParameter("JobWorkLevel", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var recordsPerPageParameter = recordsPerPage.HasValue ?
                new ObjectParameter("RecordsPerPage", recordsPerPage) :
                new ObjectParameter("RecordsPerPage", typeof(int));
    
            var sortColParameter = sortCol != null ?
                new ObjectParameter("SortCol", sortCol) :
                new ObjectParameter("SortCol", typeof(string));
    
            var sortDirParameter = sortDir != null ?
                new ObjectParameter("SortDir", sortDir) :
                new ObjectParameter("SortDir", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MaxEmpReport_Result>("MaxEmpReport", empIdParameter, clientIdParameter, doctorIdParameter, jobWorkLevelParameter, fromdateParameter, todateParameter, pageNumberParameter, recordsPerPageParameter, sortColParameter, sortDirParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StatusSummary_Result> StatusSummary(string empId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatusSummary_Result>("StatusSummary", empIdParameter);
        }
    
        public virtual ObjectResult<TaskStatsGet_Result> TaskStatsGet(string empId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaskStatsGet_Result>("TaskStatsGet", empIdParameter);
        }
    
        public virtual ObjectResult<TopPerformances_Result> TopPerformances()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TopPerformances_Result>("TopPerformances");
        }
    }
}
